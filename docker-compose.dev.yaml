services:

  # MongoDB for product service
  mongo_products:
    container_name: mongo_products
    image: mongo:8.0.5
    ports:
      - "27017:27017"
    # volumes:
    #   - mongo-products-data:/data/db

  # MongoDB for user service
  mongo_users:
    container_name: mongo_users
    image: mongo:8.0.5
    ports:
      - "27018:27017"
    # volumes:
    #   - mongo-users-data:/data/db

  # Postgres for order service
  postgres_orders:
    image: postgres:17.0
    ports:
      - "5431:5432"
#    volumes:
#      - postgres-orders-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=order-service
      - POSTGRES_USER=order-service
      - POSTGRES_DB=OrdersDB

  # Postgres for inventory service
  postgres_inventories:
    image: postgres:17.0
    ports:
      - "5432:5432"
#    volumes:
#      - postgres-inventories-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=inventory-service
      - POSTGRES_USER=inventory-service
      - POSTGRES_DB=InventoryDB

  # Config Server (Sprint Cloud Config Server)
  config-server:
    image: abdeod/config-server:latest
    container_name: config-server
    ports:
      - "8888:8080"
    environment:
      - SERVER_PORT=8080
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8080/eureka


  # Discovery Server (Eureka Server)
  discovery-server:
    image: abdeod/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8080"
#    environment:
#      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8080/
    depends_on:
      - config-server


  # API Gateway Service
  api-gateway:
    image: abdeod/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8080/eureka
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8080/
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
      - discovery-server

  # Product Service
  product-service:
    image: abdeod/product-service:latest
    container_name: product-service
    ports:
      - "8081:8080"
    environment:
#      - EUREKA_SERVICE_URL_DEFAULT_ZONE=http://discovery-server:8080/eureka/#
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8080/
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_CLOUD_CONFIG_ENABLED=false
    depends_on:
      - mongo_products
      - discovery-server
      - config-server

  # Order Service
  order-service:
    image: abdeod/order-service:latest
    container_name: order-service
    ports:
      - "8082:8080"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8080/
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres_orders
      - discovery-server
      - config-server

  # Inventory Service
  inventory-service:
    image: abdeod/inventory-service:latest
    container_name: inventory-service
    ports:
      - "8083:8080"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8080/
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres_inventories
      - discovery-server
      - config-server

  # User Service
  user-service:
    image: abdeod/user-service:latest
    container_name: user-service
    ports:
      - "8085:8080"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8080/
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo_users
      - discovery-server
      - config-server

  # Notification Service
  notification-service:
    image: abdeod/notification-service:latest
    container_name: notification-service
    ports:
      - "8084:8080"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8080/
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discovery-server
      - config-server
      
  zookeeper:
    image: bitnami/zookeeper:3.9.3
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    # volumes:
    #   - kafka_zookeeper:/opt/zookeeper-3.6.1/data
    
  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    # volumes:
    #   - kafka_kafka:/opt/kafka_2.12-2.2.0/logs
    depends_on:
      - "zookeeper"
  
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
